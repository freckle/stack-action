name: Stack
description: Build, test, and lint a stack-based Haskell project
inputs:
  working-directory:
    description: "Working directory for run commands"
    required: true
    default: .
  stack-yaml:
    description: "Override stack.yaml, relative to working-directory"
    required: true
    default: stack.yaml
  fast:
    description: "Pass --fast in build/test"
    required: true
    default: true
  pedantic:
    description: "Pass --pedantic in build/test"
    required: true
    default: true
  test:
    description: Whether to run tests
    required: false
    default: true
  stack-arguments:
    description: "Additional arguments for stack invocations"
    required: true
    default: ""
  cache-prefix:
    required: true
    default: ""
outputs:
  compiler:
    description: "compiler.actual value from stack query"
    value: ${{ steps.stack-query.outputs.compiler }}
  compiler-version:
    description: "The GHC version part of compiler"
    value: ${{ steps.stack-query.outputs.compiler-version }}
  snapshot-doc-root:
    description: "snapshot-doc-root value from stack path"
    value: ${{ steps.stack-path.outputs.snapshot-doc-root }}
  local-doc-root:
    description: "local-doc-root value from stack path"
    value: ${{ steps.stack-path.outputs.local-doc-root }}
  local-hoogle-root:
    description: "local-hoogle-root value from stack path"
    value: ${{ steps.stack-path.outputs.local-hoogle-root }}
  stack-root:
    description: "stack-root value from stack path"
    value: ${{ steps.stack-path.outputs.stack-root }}
  project-root:
    description: "project-root value from stack path"
    value: ${{ steps.stack-path.outputs.project-root }}
  config-location:
    description: "config-location value from stack path"
    value: ${{ steps.stack-path.outputs.config-location }}
  bin-path:
    description: "bin-path value from stack path"
    value: ${{ steps.stack-path.outputs.bin-path }}
  programs:
    description: "programs value from stack path"
    value: ${{ steps.stack-path.outputs.programs }}
  compiler-exe:
    description: "compiler-exe value from stack path"
    value: ${{ steps.stack-path.outputs.compiler-exe }}
  compiler-bin:
    description: "compiler-bin value from stack path"
    value: ${{ steps.stack-path.outputs.compiler-bin }}
  compiler-tools-bin:
    description: "compiler-tools-bin value from stack path"
    value: ${{ steps.stack-path.outputs.compiler-tools-bin }}
  local-bin:
    description: "local-bin value from stack path"
    value: ${{ steps.stack-path.outputs.local-bin }}
  extra-include-dirs:
    description: "extra-include-dirs value from stack path"
    value: ${{ steps.stack-path.outputs.extra-include-dirs }}
  extra-library-dirs:
    description: "extra-library-dirs value from stack path"
    value: ${{ steps.stack-path.outputs.extra-library-dirs }}
  snapshot-pkg-db:
    description: "snapshot-pkg-db value from stack path"
    value: ${{ steps.stack-path.outputs.snapshot-pkg-db }}
  local-pkg-db:
    description: "local-pkg-db value from stack path"
    value: ${{ steps.stack-path.outputs.local-pkg-db }}
  global-pkg-db:
    description: "global-pkg-db value from stack path"
    value: ${{ steps.stack-path.outputs.global-pkg-db }}
  ghc-package-path:
    description: "ghc-package-path value from stack path"
    value: ${{ steps.stack-path.outputs.ghc-package-path }}
  snapshot-install-root:
    description: "snapshot-install-root value from stack path"
    value: ${{ steps.stack-path.outputs.snapshot-install-root }}
  local-install-root:
    description: "local-install-root value from stack path"
    value: ${{ steps.stack-path.outputs.local-install-root }}
  dist-dir:
    description: "dist-dir value from stack path"
    value: ${{ steps.stack-path.outputs.dist-dir }}
  local-hpc-root:
    description: "local-hpc-root value from stack path"
    value: ${{ steps.stack-path.outputs.local-hpc-root }}
  local-bin-path:
    description: "local-bin-path value from stack path"
    value: ${{ steps.stack-path.outputs.local-bin-path }}
  ghc-paths:
    description: "ghc-paths value from stack path"
    value: ${{ steps.stack-path.outputs.ghc-paths }}
runs:
  using: composite
  steps:
    - id: setup
      name: Setup
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        stack --no-terminal --stack-yaml ${{ inputs.stack-yaml }} \
          setup

        resolver_nightly=

        # Extra arguments for build and test steps, not the dependencies step
        stack_build_arguments=()

        if ${{ inputs.fast }}; then
          stack_build_arguments+=( --fast )
        fi

        if ${{ inputs.pedantic }}; then
          stack_build_arguments+=( --pedantic )
        fi

        echo "stack-build-arguments=${stack_build_arguments[*]}" >>"$GITHUB_OUTPUT"

        has_resolver() {
          grep -Fq -- '--resolver' <<'EOM'
        ${{ inputs.stack-arguments }}
        EOM
        }

        if ! has_resolver && [[ "${{ inputs.stack-yaml }}" == 'stack-nightly.yaml' ]]; then
          resolver_nightly='--resolver nightly'
        fi

        echo "resolver-nightly=$resolver_nightly" >>"$GITHUB_OUTPUT"
        echo "stack-build-arguments=${stack_build_arguments[*]}" >>"$GITHUB_OUTPUT"

        echo "package-hash=${{ hashFiles(inputs.stack-yaml, '**/package.yaml', '**/*.cabal') }}" >>"$GITHUB_OUTPUT"
        echo "sources-hash=${{ hashFiles('**', '!**/.stack-work') }}" >>"$GITHUB_OUTPUT"

        echo 'stack-works<<EOM' >>"$GITHUB_OUTPUT"
        {
          echo "${{ inputs.working-directory }}/.stack-work"

          # lots of simpler ways to do this, but only this works on OSX too
          find . -regex '.*/\(package\.yaml\|.*\.cabal\)$' |
            while IFS=$'\n' read -r path; do
              dir=$(dirname "$path" | sed 's%^\.$%./%; s%^\.%%')
              echo "${{ inputs.working-directory }}$dir/.stack-work"
            done
        } | sort -u >>"$GITHUB_OUTPUT"
        echo 'EOM' >>"$GITHUB_OUTPUT"

    - name: Restore dependencies cache
      id: restore-deps
      uses: actions/cache/restore@v3
      with:
        path: |
          ~/.stack
          ${{ steps.setup.outputs.stack-works }}
        key: ${{ inputs.cache-prefix }}${{ runner.os }}-stack-deps-${{ steps.setup.outputs.package-hash }}
        restore-keys: |
          ${{ inputs.cache-prefix }}${{ runner.os }}-stack-deps-

    - name: Install dependencies
      if: steps.restore-deps.outputs.cache-hit != 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        stack --no-terminal --stack-yaml ${{ inputs.stack-yaml }} \
          ${{ steps.setup.outputs.resolver-nightly }} \
          build --dependencies-only --test --no-run-tests \
          ${{ inputs.stack-arguments }}

    - name: Save dependencies cache
      if: steps.restore-deps.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: |
          ~/.stack
          ${{ steps.setup.outputs.stack-works }}
        key: ${{ inputs.cache-prefix }}${{ runner.os }}-stack-deps-${{ steps.setup.outputs.package-hash }}

    - name: Restore build cache
      id: restore-build
      uses: actions/cache/restore@v3
      with:
        path: ${{ steps.setup.outputs.stack-works }}
        key: ${{ inputs.cache-prefix }}${{ runner.os }}-stack-build-${{ steps.setup.outputs.package-hash }}-${{ steps.setup.outputs.sources-hash }}
        restore-keys: |
          ${{ inputs.cache-prefix }}${{ runner.os }}-stack-build-${{ steps.setup.outputs.package-hash }}-
          ${{ inputs.cache-prefix }}${{ runner.os }}-stack-build-

    - name: Build
      if: steps.restore-build.outputs.cache-hit != 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        stack --no-terminal --stack-yaml ${{ inputs.stack-yaml }} \
          ${{ steps.setup.outputs.resolver-nightly }} \
          build ${{ steps.setup.outputs.stack-build-arguments }} \
          --test --no-run-tests \
          ${{ inputs.stack-arguments }}

    - name: Save build cache
      if: steps.restore-build.outputs.cache-hit != 'true'
      uses: actions/cache/restore@v3
      with:
        path: ${{ steps.setup.outputs.stack-works }}
        key: ${{ inputs.cache-prefix }}${{ runner.os }}-stack-build-${{ steps.setup.outputs.package-hash }}-${{ steps.setup.outputs.sources-hash }}

    - name: Test
      if: ${{ inputs.test == 'true' }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        stack --no-terminal --stack-yaml ${{ inputs.stack-yaml }} \
          ${{ steps.setup.outputs.resolver-nightly }} \
          build ${{ steps.setup.outputs.stack-build-arguments }} --test \
          ${{ inputs.stack-arguments }}

    - id: stack-query
      name: Set stack-query outputs
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        tmp=$(mktemp)
        trap 'rm -r "$tmp"' EXIT

        stack --no-terminal --stack-yaml ${{ inputs.stack-yaml }} \
          ${{ steps.setup.outputs.resolver-nightly }} \
          query compiler | tee "$tmp"

        sed '/^actual: \(.*\)$/!d; s//compiler=\1/' "$tmp" >>"$GITHUB_OUTPUT"
        sed '/^actual: ghc-\(.*\)$/!d; s//compiler-version=\1/' "$tmp" >>"$GITHUB_OUTPUT"

    - id: stack-path
      name: Set stack-path outputs
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        stack --no-terminal --stack-yaml ${{ inputs.stack-yaml }} \
          ${{ steps.setup.outputs.resolver-nightly }} \
          path | while IFS=:\  read -r name value; do
          printf '%s: %s\n' "$name" "$value"
          printf '%s=%s\n' "$name" "$value" >>"$GITHUB_OUTPUT"
        done
