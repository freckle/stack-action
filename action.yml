name: Stack
description: Build and test a stack-based Haskell project
inputs:
  working-directory:
    description: |
      Working directory for run commands
  test:
    description: |
      Whether to run tests
    default: true
  stack-arguments:
    description: |
      Additional arguments for all top-level `stack` command invocations.
    default: "--no-terminal"
  stack-query-arguments:
    description: |
      Additional arguments in `stack query` invocations.
  stack-path-arguments:
    description: |
      Additional arguments in ``stack path`` invocations.
  stack-setup-arguments:
    description: |
      Additional arguments in `stack setup` invocations.
  stack-build-arguments:
    description: |
      Additional arguments for all `stack build` invocations.
    default: "--fast --pedantic"
  stack-build-arguments-dependencies:
    description: |
      Additional arguments passed after `stack-build-arguments` in `stack build`
      invocations on the _Dependencies_ step.
  stack-build-arguments-build:
    description: |
      Additional arguments passed after `stack-build-arguments` in `stack build`
      invocations on the _Build_ step.
  stack-build-arguments-test:
    description: |
      Additional arguments passed after `stack-build-arguments` in `stack build`
      invocations on the _Test_ step.
  cache-prefix:
    description: |
      Prefix applied to all cache keys. This can be any value you like, but
      teams often use `v{N}` and bump it to `v{N+1}` when/if they need to
      explicitly bust caches.
  cache-save-always:
    description: |
      Save artifacts to the cache even if the build fails. This may speed up
      builds in subsequent runs at the expense of slightly-longer builds when a
      full cache-hit occurs. Since `@v4.2.0`
    default: false
  upgrade-stack:
    description: |
      Upgrade stack
    default: true
  stack-yaml:
    description: |
      **Deprecated** use `env.STACK_YAML` or `stack-arguments` instead.
runs:
  using: "node20"
  main: "dist/index.js"
